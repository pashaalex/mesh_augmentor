name: Build MeshAugmentor

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v0.0.9)'
        required: true
      prerelease:
        description: 'Mark as prerelease'
        type: boolean
        required: false
        default: false
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup build environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libomp-dev make zip

      - name: Setup build environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install -y make
          choco install -y mingw

      - name: Build native library
        run: |
          cd cpp
          make

      # ---------- Packaging for Linux ----------
      - name: Package (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          set -eux
          STAGE="dist/linux"
          mkdir -p "$STAGE/mesh_augmentor/_lib"

          # 1) Copy native libs into mesh_augmentor/_lib
          cp cpp/*.so "$STAGE/mesh_augmentor/_lib/"

          # 2) Copy Python package files
          cp mesh_augmentor/__init__.py mesh_augmentor/mesh_augmentor.py mesh_augmentor/deformations.py "$STAGE/mesh_augmentor/"

          # 3) Create final archive
          (cd "$STAGE" && zip -r "../../mesh_augmentor-linux.zip" .)

      # ---------- Packaging for Windows ----------
      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $stage = "dist\\windows"
          New-Item -ItemType Directory -Force -Path "$stage\\mesh_augmentor\\_lib" | Out-Null

          # 1) Copy native DLLs into mesh_augmentor/_lib
          Copy-Item "cpp\\*.dll" "$stage\\mesh_augmentor\\_lib\\" -Force

          # 2) Copy MinGW runtime DLLs if available
          $gpp = (Get-Command g++.exe -ErrorAction Stop).Source
          $mingwRoot = Split-Path (Split-Path $gpp) -Parent
          $bins = Join-Path $mingwRoot 'bin'
          foreach ($dll in @('libgomp-1.dll','libgcc_s_seh-1.dll','libwinpthread-1.dll')) {
            $src = Join-Path $bins $dll
            if (Test-Path $src) { Copy-Item $src "$stage\\mesh_augmentor\\_lib\\" -Force }
          }

          # 3) Copy Python package files
          Copy-Item "mesh_augmentor\\__init__.py","mesh_augmentor\\mesh_augmentor.py","mesh_augmentor\\deformations.py" "$stage\\mesh_augmentor\\" -Force

          # 4) Create final archive
          if (Test-Path "mesh_augmentor-windows.zip") { Remove-Item "mesh_augmentor-windows.zip" -Force }
          Compress-Archive -Path "$stage\\*" -DestinationPath "mesh_augmentor-windows.zip" -Force

      # Upload artifacts for each OS
      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: mesh_augmentor-linux
          path: mesh_augmentor-linux.zip

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: mesh_augmentor-windows
          path: mesh_augmentor-windows.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: mesh_augmentor-*
          merge-multiple: true

      - name: List files
        run: ls -la

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ github.token }}
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || false }}
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          files: |
            mesh_augmentor-linux.zip
            mesh_augmentor-windows.zip
          overwrite: true

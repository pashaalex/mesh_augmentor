name: Build Library

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.2.3)'
        required: true
      prerelease:
        description: 'Mark release as prerelease'
        type: boolean
        required: false
        default: false
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # требуется для публикации релиза

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup build environment (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libomp-dev

      - name: Setup build environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install -y make
          choco install -y mingw
          # Update PATH for current session:
          $env:ChocolateyInstall = (Get-ChildItem Env:ChocolateyInstall).Value
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          g++ --version
          make --version

      - name: Find and copy necessary DLLs (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $gpp = (Get-Command g++).Path
          if (-not $gpp) { throw "g++ not found in PATH" }
          $mingwRoot = Split-Path (Split-Path $gpp) -Parent  # убрать \bin\g++.exe
          Copy-Item "$mingwRoot\bin\libgomp-1.dll" -Destination .
          Copy-Item "$mingwRoot\bin\libgcc_s_seh-1.dll" -Destination .
          Copy-Item "$mingwRoot\bin\libwinpthread-1.dll" -Destination .

      - name: Build library
        run: |
          cd cpp
          make

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mesh_render-library-${{ matrix.os }}
          path: |
            cpp/mesh_render.dll
            cpp/mesh_render.so
            cpp/*.o
            mesh_augmentator.py
            libgomp-1.dll
            libgcc_s_seh-1.dll
            libwinpthread-1.dll
          if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    # Разрешаем релиз и при ручном запуске (workflow_dispatch), и при пуше тега
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts (Linux)
        uses: actions/download-artifact@v4
        with:
          name: mesh_render-library-ubuntu-latest
          path: ./linux

      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v4
        with:
          name: mesh_render-library-windows-latest
          path: ./windows

      - name: Ensure zip is available
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Create zip archive (Linux)
        run: |
          cd linux
          cp ../MeshAugmentor.py . 
          zip -r ../mesh_render-linux.zip .

      - name: Create zip archive (Windows)
        run: |
          cd windows
          cp ../MeshAugmentor.py . 
          zip -r ../mesh_render-windows.zip .

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ github.token }}  # использовать встроенный токен Actions
          draft: false
          prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease || false }}
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          files: |
            mesh_render-linux.zip
            mesh_render-windows.zip
